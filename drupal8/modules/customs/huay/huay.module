<?php

use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;
use \Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\Entity\Term;

use Drupal\huay\Utils\Utils;


/*
$uri = 'mongodb://mongo:27017';
$collection = (new MongoDB\Client($uri))->local->startup_log;
$changeStream = $collection->watch();
for ($changeStream->rewind(); true; $changeStream->next()) {
      if ( ! $changeStream->valid()) {
          continue;
      }

      $event = $changeStream->current();

      if ($event['operationType'] === 'invalidate') {
          break;
      }

      $ns = sprintf('%s.%s', $event['ns']['db'], $event['ns']['coll']);
      $id = json_encode($event['documentKey']['_id']);

      switch ($event['operationType']) {
          case 'delete':
              printf("Deleted document in %s with _id: %s\n\n", $ns, $id);
              break;

          case 'insert':
              printf("Inserted new document in %s\n", $ns);
              echo json_encode($event['fullDocument']), "\n\n";
              break;

          case 'replace':
              printf("Replaced new document in %s with _id: %s\n", $ns, $id);
              echo json_encode($event['fullDocument']), "\n\n";
              break;

          case 'update':
              printf("Updated document in %s with _id: %s\n", $ns, $id);
              echo json_encode($event['updateDescription']), "\n\n";
              break;
      }
  }
*/

function huay_page_attachments(array &$attachments) {
    $attachments['#attached']['library'][] = 'huay/huay';
    // $attachments['#attached']['library'][] = 'mydata/socket_io';

    // $element['#attached']['js'][] = array(
    //     'data' => array('myModule' => array('basePath' => base_path())), 
    //     'type' => 'setting',
    //   );

    /*
    pass parameter to .js

    (function ($, Drupal, drupalSettings) {
        console.log(drupalSettings);

        var user = drupalSettings.user;
        console.log(user);

        var foo = drupalSettings.fluffiness.cuddlySlider.foo;
        console.log(foo);

    })(jQuery, Drupal, drupalSettings);
    */

    $configs= Drupal\config_pages\Entity\ConfigPages::config('config_nodejs');
    $nodejs_url = '';///$configs->get('field_nodejs_url')->value;
    $params = [
        'nodejs_url' => $nodejs_url,
    ];
    $attachments['#attached']['drupalSettings']['configs'] = $params;
}

/*
 * Implements hook_theme()
*/
function huay_theme($existing, $type, $theme, $path) {  
  return [
    'front-page' => [
      'variables' => [
        'role' => '',
        'params' => array(),
      ],
    ],   
    'lottery-page' => [
      'variables' => [
        'role' => '',
        'params' => array(),
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 * 
 * กรณีที่เรา เพิ่ม taxonomy_term ใหม่ เราจะต้อง เพิ่มข้อมูลฟิลล์ field_id_term == $entity->id() แก้ปัญหา id ไม่เหมือนกัน dev, uat, prod
 */
function huay_taxonomy_term_insert(Drupal\Core\Entity\EntityInterface $entity) {
    // $vocabularys = \Drupal\config_pages\Entity\ConfigPages::config('config_global')->get('field_taxonomy_term')->value;
    $vocabularys = explode(",", Utils::GetConfigGlobal()['taxonomy_term']);

    if (in_array($entity->bundle(), $vocabularys)) {
        $id_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($entity->id())->get('field_tid_code')->getValue()[0]['value'];

        if(empty($id_term)){
            $term = Term::load($entity->id());
            if (!empty($term)) {
                $term->field_tid_code = $entity->id();
                $term->save();
            }
        }
        
        // dpm(t('oop > @tid ',array('@tid'=>$tid))->__toString());
    }
}

/*
hook_entity_create(\Drupal\Core\Entity\EntityInterface $entity) 
Acts when creating a new entity.
*/
// function huay_entity_create(\Drupal\Core\Entity\EntityInterface $entity) {
//     \Drupal::logger('huay_entity_create')->notice(t('ID: @id, EntityTypeId : @EntityTypeId, bundle : @bundle ',array( '@id'=>$entity->id(), 
//                                                                                                                     '@EntityTypeId'=>$entity->getEntityTypeId(), 
//                                                                                                                     '@bundle'=>$entity->bundle()) )->__toString());
// }

// เงินที่ถอน 
function credit_balance($user){
    // ยอดฝากเงินทั้งหมด
    $amount_of_money = 0;
    foreach ($user->get('field_deposit')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );
            
        $deposit_status = $p->get('field_deposit_status')->target_id;
        if($deposit_status == 15){
            // จำนวนเงินที่โอน
            $field_amount_of_money = $p->get('field_amount_of_money')->getValue();
            if(!empty($field_amount_of_money)){
                $amount_of_money += $field_amount_of_money[0]['value'];
            }
        }
    }

    //  ถอนเงิน field_withdraw
    $withdraw = 0;
    foreach ($user->get('field_withdraw')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );
        $deposit_status = $p->get('field_withdraw_status')->target_id;
        // เอาทุกสถานะ ยกเว้น สถานะไม่อนุมัติเท่านั้น
        if($deposit_status != 17){
            // จำนวนเงินที่โอน
            $field_amount_of_withdraw = $p->get('field_amount_of_withdraw')->getValue();
            if(!empty($field_amount_of_withdraw)){
                $withdraw += $field_amount_of_withdraw[0]['value'];
            }
        }
    }

    return $amount_of_money - $withdraw;   
}

function mongodb_people($uid){
    if(empty($uid)){
        return FALSE;
    }

    $data = array();
    $user = User::load($uid);

    $image_url = '';  
    $user_picture = $user->get('user_picture')->getValue();
    if (!empty($user_picture)) {
        $image_url = Utils::get_file_url($user_picture[0]['target_id']);
    }

    // $credit_balance = 0;
    // $field_credit_balance = $user->get('field_credit_balance')->getValue();
    // if(!empty($field_credit_balance)){
    //     $credit_balance = $field_credit_balance[0]['value'];
    // }

    $data = array(
                'uid'      =>$uid,
                'name'     =>$user->getUsername(),
                'email'    =>$user->getEmail(),
                'roles'    =>$user->getRoles(),
                'image_url'=>$image_url,
                'credit_balance' =>credit_balance($user),
            );

    $banks = array();
    foreach ($user->get('field_bank')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );

        // ชื่อบัญชี
        $name = '';
        $field_name_bank = $p->get('field_name_bank')->getValue();
        if(!empty($field_name_bank)){
            $name = $field_name_bank[0]['value'];
        }

        // เลขที่บัญชี
        $number_bank = '';
        $field_number_bank = $p->get('field_number_bank')->getValue();
        if(!empty($field_number_bank)){
            $number_bank = $field_number_bank[0]['value'];
        }

        // ธนาคาร tid
        $bank_tid        = $p->get('field_bank')->target_id;

        // ชื่อธนาคาร
        $term = Term::load($bank_tid);
        $bank_name = $term->getName();

        
        

        $banks[$bv['target_id']] = array(
                                        'name'          =>$name,
                                        'number_bank'   =>$number_bank,
                                        'bank_tid'      =>$bank_tid,
                                        'bank_name'     =>$bank_name
                                        );
    }
    $data['banks'] = $banks;

    $user_access = array();
    foreach ($user->get('field_user_access')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );

        // cookie
        $cookie = '';
        $field_cookie = $p->get('field_cookie')->getValue();
        if(!empty($field_cookie)){
            $cookie = $field_cookie[0]['value'];
        }

        // field_socket_id
        $socket_id = '';
        $field_socket_id = $p->get('field_socket_id')->getValue();
        if(!empty($field_socket_id)){
            $socket_id = $field_socket_id[0]['value'];
        }
        
        $user_access[$bv['target_id']] = array('cookie' =>$cookie, 'socket_id' =>$socket_id);
    }

    $data['user_access'] = $user_access;

    // ฝากเงิน field_deposit
    $deposit = array();
    foreach ($user->get('field_deposit')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );

        // ID ธนาคารของเว็บฯ 
        $hauy_id_bank = '';
        $field_hauy_id_bank = $p->get('field_hauy_id_bank')->getValue();
        if(!empty($field_hauy_id_bank)){
            $hauy_id_bank = $field_hauy_id_bank[0]['value'];
        }

        // ID บัญชีธนาคารของลูกค้าที่จะให้โอนเงินเข้า 
        $user_id_bank = '';
        $field_user_id_bank = $p->get('field_user_id_bank')->getValue();
        if(!empty($field_user_id_bank)){
            $user_id_bank = $field_user_id_bank[0]['value'];
        }

        // จำนวนเงินที่โอน
        $amount_of_money = '';
        $field_amount_of_money = $p->get('field_amount_of_money')->getValue();
        if(!empty($field_amount_of_money)){
            $amount_of_money = $field_amount_of_money[0]['value'];
        }

        // ช่องทางการโอนเงิน 
        $transfer_method = $p->get('field_transfer_method')->target_id;
       
        // วัน & เวลา ที่โอน 
        $date_transfer = '';
        $field_date_transfer = $p->get('field_date_transfer')->getValue();
        if(!empty($field_date_transfer)){
            $date_transfer = $field_date_transfer[0]['value'];
        }

        // หมายเหตุ 
        $annotation = '';
        $field_annotation = $p->get('field_annotation')->getValue();
        if(!empty($field_annotation)){
            $annotation = $field_annotation[0]['value'];
        }

        // สถานะการฝากเงิน 
        $deposit_status = $p->get('field_deposit_status')->target_id;

        $deposit[$bv['target_id']] = array( 'hauy_id_bank'      =>$hauy_id_bank, 
                                            'user_id_bank'      =>$user_id_bank,
                                            'amount_of_money'   =>$amount_of_money,
                                            'transfer_method'   =>$transfer_method,
                                            'date_transfer'     =>$date_transfer,
                                            'annotation'        =>$annotation,
                                            'deposit_status'    =>$deposit_status,
                                            );
    }
    $data['deposit'] = $deposit;

    // ถอนเงิน 
    $withdraw = array();
    foreach ($user->get('field_withdraw')->getValue() as $bi=>$bv){
        $p = Paragraph::load( $bv['target_id'] );

        // ID บัญชีธนาคารของลูกค้าที่จะให้โอนเงินเข้า 
        $user_id_bank = '';
        $field_user_id_bank = $p->get('field_user_id_bank')->getValue();
        if(!empty($field_user_id_bank)){
            $user_id_bank = $field_user_id_bank[0]['value'];
        }

        // จำนวนเงินที่ถอน
        $amount_of_withdraw = '';
        $field_amount_of_withdraw = $p->get('field_amount_of_withdraw')->getValue();
        if(!empty($field_amount_of_withdraw)){
            $amount_of_withdraw = $field_amount_of_withdraw[0]['value'];
        }

        // หมายเหตุ 
        $annotation = '';
        $field_annotation = $p->get('field_annotation')->getValue();
        if(!empty($field_annotation)){
            $annotation = $field_annotation[0]['value'];
        }

        // สถานะการฝากเงิน 
        $withdraw_status = $p->get('field_withdraw_status')->target_id;

        $withdraw[$bv['target_id']] = array('user_id_bank'      =>$user_id_bank,
                                            'amount_of_withdraw'=>$amount_of_withdraw,
                                            'annotation'        =>$annotation,
                                            'withdraw_status'   =>$withdraw_status,
                                            );
    }
    $data['withdraw'] = $withdraw;

    $collection = Utils::GetMongoDB()->people;
    $filter = array('uid'=>$uid);
    if($collection->count($filter)){
        // udpate
        $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $collection->updateOne($filter, array('$set' =>$data) );
    }else{
        // create
        $data['createdAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $collection->insertOne($data);
    }
    return TRUE;
}

function mongodb_contact_us($id){
    $contact_us = ConfigPages::config('contact_us');

    /*
     $image_url = '';  
          if (!$user->get('user_picture')->isEmpty()) {
            $image_url = file_create_url($user->get('user_picture')->entity->getFileUri());
          }
    */
    // 
    $data = array(
        'id'            =>$id,
        'line_at'       =>$contact_us->get('field_contact_us_line_at')->value,
        'url_qrcode'    =>Utils::get_file_url($contact_us->get('field_contact_us_qrcode')->getValue()[0]['target_id']),
        'description'   =>$contact_us->get('field_contact_us_description')->value,
        'tel'           =>$contact_us->get('field_contact_us_tel')->value,
    );

    $collection = Utils::GetMongoDB()->contact_us;
    $filter = array('id'=>$id);
    if($collection->count($filter)){
        // udpate
        $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $collection->updateOne($filter, array('$set' =>$data) );
    }else{
        // create
        $data['createdAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
        $collection->insertOne($data);
    }
}

// ช่องทางการโอนเงิน
function mongodb_transfer_method($tid){
    if(empty($tid)){
        return FALSE;
    }

    $type = 'taxonomy_term';
    $cid = 'transfer_method';
    $branchs_terms = \Drupal::entityManager()->getStorage($type)->loadTree($cid);

    $collection = Utils::GetMongoDB()->transfer_method;
    foreach($branchs_terms as $tag_term) {
        $data = array();
        $data['tid']    = $tag_term->tid;
        $data['name']   = $tag_term->name;

        $filter = array('tid'=>$tag_term->tid);
        if($collection->count($filter)){
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->updateOne($filter, array('$set' =>$data) );
        }else{
            // create
            $data['createdAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->insertOne($data);
        }
    }
}

// รายชื่อธนาคาร ของเว็บฯ
function mongodb_huay_list_bank($tid){
    if(empty($tid)){
        return FALSE;
    }

    $type = 'taxonomy_term';
    $cid = 'huay_list_bank';
    $branchs_terms = \Drupal::entityManager()->getStorage($type)->loadTree($cid);

    $collection = Utils::GetMongoDB()->huay_list_bank;
    foreach($branchs_terms as $tag_term) {
        $data = array();
        $data['tid']    = $tag_term->tid;
        $data['name']   = $tag_term->name;

        $load = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tag_term->tid);
   
        $huay_name_bank = '';
        $field_huay_name_bank = $load->get('field_huay_name_bank')->getValue();
        if(!empty($field_huay_name_bank)){
            $huay_name_bank = $field_huay_name_bank[0]['value'];
        }

        $huay_number_bank = '';
        $field_huay_number_bank = $load->get('field_huay_number_bank')->getValue();
        if(!empty($field_huay_number_bank)){
            $huay_number_bank = $field_huay_number_bank[0]['value'];
        }
        $data['huay_name_bank']    = $huay_name_bank;
        $data['huay_number_bank']   = $huay_number_bank;

        $filter = array('tid'=>$tag_term->tid);
        if($collection->count($filter)){
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->updateOne($filter, array('$set' =>$data) );
        }else{
            // create
            $data['createdAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->insertOne($data);
        }
    }
}

// รายชื่อธนาคาร
function mongodb_list_bank($tid){
    if(empty($tid)){
        return FALSE;
    }

    $type = 'taxonomy_term';
    $cid  = 'list_bank';
    $branchs_terms = \Drupal::entityManager()->getStorage($type)->loadTree($cid);

    $collection = Utils::GetMongoDB()->list_bank;
    foreach($branchs_terms as $tag_term) {
        $data = array();
        $data['tid']    = $tag_term->tid;
        $data['name']   = $tag_term->name;

        $filter = array('tid'=>$tag_term->tid);
        if($collection->count($filter)){
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->updateOne($filter, array('$set' =>$data) );
        }else{
            // create
            $data['createdAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $data['updatedAt']=new MongoDB\BSON\UTCDateTime((new DateTime($today))->getTimestamp()*1000);
            $collection->insertOne($data);
        }
    }
}

/*
hook_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) 
เราจะไม่ใช้ hook_entity_create เพราะว่า hook_entity_create จะถูกเรียกก่อน hook_entity_insert ซึ่งจะไม่ให้ id 
*/
function huay_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
    \Drupal::logger('huay_entity_insert')->notice(t('ID: @id, EntityTypeId : @EntityTypeId, bundle : @bundle ',array(   '@id'           =>$entity->id(), 
                                                                                                                        '@EntityTypeId' =>$entity->getEntityTypeId(), 
                                                                                                                        '@bundle'       =>$entity->bundle()) )->__toString());
    switch($entity->getEntityTypeId()){
        case 'user':{
            mongodb_people($entity->id());
        break;
        }
        /*
        case 'paragraph':{
            switch($entity->bundle()){
                case 'user_banks':{
                    $p = Paragraph::load( $entity->id() );
                    // \Drupal::logger('huay_entity_insert > paragraph > user_banks')->notice( serialize($p->getParentEntity()) );

                    // dpm($p->bundle());
                    // dpm($p->id());
                    // $field_number_bank = $p->get('field_number_bank')->getValue();
                    // if(!empty($field_number_bank)){
                    //     $field_number_bank = $field_number_bank[0]['value'];
                    // }
                    // $field_bank        = $p->get('field_bank')->target_id;

                    $parentEntity = $p->getParentEntity();
                    // dpm($parentEntity->getEntityTypeId());
                    // dpm($parentEntity->id());

                    switch($parentEntity->getEntityTypeId()){
                        case 'user':{
                        break;
                        }
                    }
                   
                break;
                }
            }
        break;
        }
        */
    }

    // ID: 11, EntityTypeId : paragraph, bundle : user_banks
}

/*
hook_entity_update(Drupal\Core\Entity\EntityInterface $entity) 
*/
function huay_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
    \Drupal::logger('huay_entity_update')->notice(t('ID: @id, EntityTypeId : @EntityTypeId, bundle : @bundle ',array( '@id'=>$entity->id(), 
                                                                                                                    '@EntityTypeId'=>$entity->getEntityTypeId(), 
                                                                                                                    '@bundle'=>$entity->bundle()) )->__toString());
    switch($entity->getEntityTypeId()){
        case 'user':{
            mongodb_people($entity->id());
        break;
        }

        case 'paragraph':{
            switch($entity->bundle()){
                case 'user_access':{
                    $p = Paragraph::load( $entity->id() );
                    $parentEntity = $p->getParentEntity();
                    switch($parentEntity->getEntityTypeId()){
                        case 'user':{
                            mongodb_people($parentEntity->id());
                        break;
                        }
                    }
                   
                break;
                }
            }
        break;
        }

        case 'config_pages':{
            switch($entity->bundle()){
                case 'contact_us':{
                    mongodb_contact_us($entity->id());
                break;
                }
            }
        break;
        }

        case 'taxonomy_term':{
            switch($entity->bundle()){
                case 'transfer_method':{
                    mongodb_transfer_method($entity->id());
                break;
                }
                case 'huay_list_bank':{
                    mongodb_huay_list_bank($entity->id());
                break;
                }
                case 'list_bank':{
                    mongodb_list_bank($entity->id());
                break;
                }
            }
        }
    }

}

/*
function hook_entity_delete(Drupal\Core\Entity\EntityInterface $entity)
*/
function huay_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
    \Drupal::logger('huay_entity_delete')->notice(t('ID: @id, EntityTypeId : @EntityTypeId, bundle : @bundle ',array(   '@id'=>$entity->id(), 
                                                                                                                        '@EntityTypeId'=>$entity->getEntityTypeId(), 
                                                                                                                        '@bundle'=>$entity->bundle()) )->__toString());
    switch($entity->getEntityTypeId()){
        case 'user':{
            $collection = Utils::GetMongoDB()->people;
            $filter = array('uid'=>$entity->id());
            if($collection->count($filter)){
                // delete
                $collection->deleteOne($filter, array('$set' =>$data) );
            }
        break;
        }
        // ID: 72, EntityTypeId : paragraph, bundle : user_access
        case 'paragraph':{
            switch($entity->bundle()){
                case 'user_access':{
                    // กรณีเรา ลบ user_access login เราต้องลบ session mongodb ด้วย
                    $p = Paragraph::load( $entity->id() );
                    if(!empty($p)){
                        // $field_cookie = $p->get('field_cookie')->getValue();
                        // if(!empty($field_cookie)){
                        //     $session = $field_cookie[0]['value'];

                        //     \Drupal::logger('huay_entity_delete')->notice(t('Session: @session',array( '@session'=>$session ))->__toString());

                        //     $collection = Utils::GetMongoDB()->sessions;
                        //     $filter = array('_id'=>$session);
                        //     if($collection->count($filter)){
                        //         // delete
                        //         $collection->deleteOne($filter, array('$set' =>$data) );
                        //     }
                        // }
                    }
                break;
                }
            }
        break;
        }
    }
}

version: "3"
services:
  drupal8:
    build: './drupal8'
    container_name: "drupal8"
    ports:
      - 8055:80
    environment:
      - DB_HOST=postgres
      - DB_NAME=d8
      - DB_USER_NAME=postgres
      - DB_PASSWORD=postgres
    volumes:
      - ./drupal8/modules:/var/www/html/sites/default/modules
      - ./drupal8/themes:/var/www/html/sites/default/themes
      - ./drupal8/info.php:/var/www/html/info.php
      - ./drupal8/composer.json:/var/www/html/composer.json
      # - ./drupal8/drupal-nodejs:/var/www/html/drupal-nodejs
      - ./drupal8/settings.php:/var/www/html/sites/default/settings.php
      # - ./drupal8/vendor:/var/www/html/vendor
      # - ./drupal8/share:/var/www/html/share
      - ./drupal8/php.ini:/usr/local/etc/php/php.ini
      - ./drupal8/callapi.php:/var/www/html/callapi.php
    restart: always
  backend:
    build: './nodejs'
    container_name: "backend"
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9231:9229"
    command:
      - node
      - "--inspect-brk=0.0.0.0"
      - "." 
    volumes:
      - ./nodejs:/usr/src/app
  postgres:
    image: postgres:10
    environment:
      POSTGRES_DB: d8
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
  pgadmin:
    image: dpage/pgadmin4:3.3
    container_name: pgadmin4
    ports:
      - 7777:80
    volumes:
      - ./pgadmin:/var/lib/pgadmin/storage
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres
      PGADMIN_DEFAULT_PASSWORD: postgres
    hostname: pgadmin4
    restart: always
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: example
    volumes:  # backup mongo
      - ./mongodb:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 9999:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

  # wmcached:
  #   image: wodby/memcached:1.4-2.0.0

  # redis:
  #   image: redis
  #   # networks:
  #   #   - chat
  #   ports:
  #     - 6379:6379

  # elasticsearch:
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
  #   container_name: elasticsearch
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=es-docker-cluster
  #     - discovery.seed_hosts=elasticsearch
  #     - cluster.initial_master_nodes=elasticsearch
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ./es_data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200

  # reactjs:
  #   container_name: reactjs
  #   build: './reactjs'
  #   # environment:
  #   #   env_file: .env
  #   #   NODE_ENV: development
  #   # environment:
  #   #   - NODE_ENV=development
  #   #   - CHOKIDAR_USEPOLLING=true
  #   volumes:
  #     - ./reactjs:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - '8099:3000'
  #   environment:
  #     - NODE_ENV=${NODE_ENV}

  # https://github.com/Base2526/cfu
  frontend:
    container_name: cfy_client
    build:
      context: ./client
      dockerfile: Dockerfile
    image: aneeshmelkot/cfy_client
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "8099:3000"
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules # เพิ่มความเร็วในการ load page /usr/src/app < จากด้านบน แล้วตามด้วย node_modules
    restart: always
  # volumes:
  #   es_data:
  #     driver: es_data
  # backend:
  #   container_name: cfy_server
  #   build:
  #       context: ./server
  #       dockerfile: Dockerfile
  #   image: aneeshmelkot/cfy_server
  #   ports:
  #       - "8100:5000"
  #   volumes:
  #       - ./server:/usr/src/app
  #   restart: always
    
# docker run --name d8 -d -p 8080:80 drupal:8.6.17
# docker run --name pg -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -d -p 5432:5432 postgres:10
# docker run --name pgadmin -e PGADMIN_DEFAULT_EMAIL=root -e PGADMIN_DEFAULT_PASSWORD=root -v pgadmin:/var/lib/pgadmin/storage -d -p 7777:80 dpage/pgadmin4:3.3

# Build & Run docker
# docker build --no-cache -t {ชือ} .
# docker run --name d8  -d -p 8080:80 d8:beta-1.0

# https://medium.com/better-programming/connect-from-local-machine-to-postgresql-docker-container-f785f00461a7
# portgres เราจำเป็นต้อง exec เข้าไปสร้าง database ก่อนโดย docker exec -it {name pg} bash
# 1. psql -U postgres
# 2. CREATE DATABASE {ชือ db};

# กรณีเราไม่สามารถใช้ pgadmin connect portgres ได้เราต้อง sudo docker inspect {ชือของ postgres} จะได้ ip เพือใช้สำหรับ connect postgras ได้